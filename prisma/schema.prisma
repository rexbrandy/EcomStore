datasource db {
  provider = "postgresql" 
  url      = "postgresql://neondb_owner:npg_hsXk38TPUpLJ@ep-sparkling-snow-a7nmlvd5-pooler.ap-southeast-2.aws.neon.tech/neondb"
}

generator client {
  provider = "prisma-client-js"
}


model User {
  id        String     @id @default(cuid())
  email     String     @unique
  name      String?
  password  String     
  isAdmin   Boolean    @default(false)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  sessions  Session[]
  cartItems CartItem[]
  orders    Order[]
}

model Session {
  id        String   @id @default(cuid()) 
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}


model Category {
  id          String    @id @default(cuid())
  name        String    @unique 
  slug        String    @unique 
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  products Product[]
}

model Product {
  id             String   @id @default(cuid())
  name           String   
  description    String?
  price          Decimal  
  imageUrl       String?
  stockQuantity  Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  cartItems  CartItem[]
  orderItems OrderItem[]

  @@index([categoryId])
  @@index([name]) 
}


model CartItem {
  id        String   @id @default(cuid())
  quantity  Int
  addedAt   DateTime @default(now())

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade) 

  @@unique([userId, productId]) 
  @@index([userId])
  @@index([productId])
}


enum OrderStatus {
  PENDING     
  PAID        
  PROCESSING  
  SHIPPED     
  DELIVERED   
  CANCELLED   
  REFUNDED    
}

model Order {
  id              String      @id @default(cuid())
  orderDate       DateTime    @default(now())
  totalAmount     Decimal     
  status          OrderStatus @default(PENDING)
  shippingAddress Json?       
  billingAddress  Json?       
  paymentIntentId String?     @unique 
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])

  items OrderItem[] 

  @@index([userId])
  @@index([status])
}

model OrderItem {
  id              String  @id @default(cuid())
  quantity        Int
  priceAtPurchase Decimal 

  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Restrict) 

  @@index([orderId])
  @@index([productId])
}