// src/routes/api/auth/login/+server.ts
import prisma from '$lib/server/prisma';
import { json, error } from '@sveltejs/kit';
import bcrypt from 'bcrypt';
import type { RequestHandler } from '@sveltejs/kit';

const SESSION_COOKIE_NAME = 'sessionId';
const SESSION_DURATION_MS = 7 * 24 * 60 * 60 * 1000; // 7 days in milliseconds

export const POST: RequestHandler = async ({ request, cookies }) => {
  try {
    const { email, password } = await request.json();

    if (!email || typeof email !== 'string') {
      throw error(400, 'Email is required.');
    }
    if (!password || typeof password !== 'string') {
      throw error(400, 'Password is required.');
    }

    const user = await prisma.user.findUnique({
      where: { email: email.toLowerCase() },
    });

    if (!user) {
      throw error(401, 'Invalid email or password.');
    }

    const passwordMatch = await bcrypt.compare(password, user.password);
    if (!passwordMatch) {
      throw error(401, 'Invalid email or password.');
    }

    // The session ID will be generated by Prisma (e.g., CUID)
    const expiresAt = new Date(Date.now() + SESSION_DURATION_MS);
    const newSession = await prisma.session.create({
      data: {
        userId: user.id,
        expiresAt,
      },
    });

    cookies.set(SESSION_COOKIE_NAME, newSession.id, {
      path: '/',
      httpOnly: true, 
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'lax',
      maxAge: SESSION_DURATION_MS / 1000, 
    });

    const { password: _, ...userWithoutPassword } = user;

    return json({ message: 'Login successful', user: userWithoutPassword });

  } catch (e: any) {
    console.error('Login error:', e);
    if (e.status && e.body && typeof e.body.message === 'string') {
        throw error(e.status, e.body.message);
    }
    throw error(500, 'Failed to log in. Please try again later.');
  }
};